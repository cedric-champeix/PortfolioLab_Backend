generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  username  String    @unique
  pwd       String
  role      String
  firstName String
  lastName  String
  address   Address?
  resume    Resume?
  projects  Project[]
  Skill     Skill[]
  Social    Social[]
}

model Project {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  imgURL       String?
  contentURL   String?
  contributors String[]
  skills       Skill[]  @relation(fields: [skillIds], references: [id])
  skillIds     String[] @db.ObjectId
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
}

model Resume {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  description String?
  skills      Skill[]
  socials     Social[]
  experiences Experience[]
  formations  Formations[]
  languages   Language[]
  hobbies     Hobby[]
  User        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String       @unique @db.ObjectId
}

model Skill {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  mastery     String
  logoURL     String?
  isSoft      Boolean
  Resume      Resume?  @relation(fields: [resumeId], references: [id], onDelete: SetNull)
  resumeId    String?  @db.ObjectId
  Projects     Project[] @relation(fields: [projectsIds], references: [id])
  projectsIds   String[]  @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId

  @@unique([name, userId])
}

model Experience {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  company     String
  logoURL     String?
  description String
  startDate   String
  endDate     String?
  Resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId    String    @db.ObjectId

  @@unique([title, resumeId])
}

model Formations {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  formationName  String
  universityName String
  level          String
  logoURL        String?
  Resume         Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId       String @db.ObjectId

  @@unique([formationName, resumeId])
}

model Social {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  logoURL  String?
  link     String
  Resume   Resume? @relation(fields: [resumeId], references: [id], onDelete: SetNull)
  resumeId String? @db.ObjectId
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @db.ObjectId

  @@unique([name, userId])
}

type Address {
  street  String
  city    String
  state   String
  zip     String
  country String
}

type Language {
  name  String
  level String
}

type Hobby {
  name String
}
